{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","onAddTaskClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","Task","changeTaskTitle","useCallback","task","id","todoListId","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","todoList","useSelector","state","todoLists","filter","todo","addTask","changeTodoListTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","t","removeTodoList","map","Button","initialState","AppWithRedux","dispatch","useDispatch","addTodolist","type","v1","AddTodoListAC","RemoveTodoListAC","newTitle","todolistId","taskId","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","allTodoListTasks","item","Paper","elevation","rootReducer","combineReducers","action","copyState","todoListTasks","newTask","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.26d4e7a2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log(\"AddItemForm is called\");\r\n\r\n    let [title, setTitle] = useState<string>(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n    const onAddTaskClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    };\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            onAddTaskClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n                label={\"Title\"}\r\n            />\r\n            <IconButton\r\n                color={\"primary\"}\r\n                onClick={onAddTaskClick}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    changeValue?: (value: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log(\"EditableSpan\");\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false);\r\n        if (props.changeValue) {\r\n            props.changeValue(title);\r\n        }\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onBlur={deActivatedEditMode}\r\n                autoFocus={true}\r\n                onChange={onChangeTitle}\r\n            />\r\n            : <span onClick={activatedEditMode}>{props.value}</span>\r\n    );\r\n});\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./App\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    task: TaskType\r\n    todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const removeTask = () => props.removeTask(props.task.id, props.todoListId);\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todoListId);\r\n    }\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId);\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId]);\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            color={\"primary\"}\r\n            checked={props.task.isDone}\r\n            onChange={onChangeStatus}\r\n        />\r\n        <EditableSpan value={props.task.title} changeValue={changeTaskTitle}/>\r\n        <IconButton onClick={removeTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from \"react\";\r\nimport {FilterValuesType, TaskType, TodolistType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    filter: FilterValuesType\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log(\"TodoList is called\");\r\n    const todoList = useSelector<AppRootStateType, TodolistType>(state => state.todoLists.filter(todo => todo.id === props.id)[0]);\r\n    //const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id]);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id]);\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(props.id, title);\r\n    }, [props.changeTodoListTitle, props.id]);\r\n    const removeTodolist = () => {\r\n        props.removeTodoList(props.id);\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        console.log(\"all\")\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        console.log(\"active\")\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        console.log(\"completed\")\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id]);\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={todoList.title} changeValue={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        task={t}\r\n                        todoListId={props.id}\r\n                        key={t.id}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n// action\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistType> = [];\r\n\r\ntype ActionType =\r\n    RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n\r\nexport const todoListsReducer = (state: Array<TodolistType> = initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todoListId, title: action.title, filter: \"all\"}]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n            }\r\n            return [...state];\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC =\r\n    (todoListId: string): RemoveTodoListActionType => ({type: \"REMOVE-TODOLIST\", id: todoListId})\r\nexport const AddTodoListAC =\r\n    (title: string): AddTodoListActionType => {\r\n        return ({type: \"ADD-TODOLIST\", title: title, todoListId: v1()})\r\n    }\r\nexport const ChangeTodoListTitleAC =\r\n    (title: string, id: string): ChangeTodoListTitleActionType => ({\r\n        type: \"CHANGE-TODOLIST-TITLE\",\r\n        title: title,\r\n        id: id\r\n    })\r\nexport const ChangeTodoListFilterAC =\r\n    (filter: FilterValuesType, id: string): ChangeTodoListFilterActionType => ({\r\n        type: \"CHANGE-TODOLIST-FILTER\",\r\n        filter: filter,\r\n        id: id\r\n    })","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\r\n\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todoListId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    todoListId: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\ntype ActionType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state};\r\n            let todoListTasks = copyState[action.todoListId];\r\n            copyState[action.todoListId] = todoListTasks.filter(t => t.id !== action.taskId);\r\n            return copyState;\r\n        }\r\n        case 'ADD-TASK': {\r\n            let copyState = {...state};\r\n            let newTask = {id: v1(), title: action.title, isDone: false};\r\n            copyState[action.todoListId] = [newTask, ...copyState[action.todoListId]]\r\n            return copyState;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            // return {\r\n            //     ...state,\r\n            //     [action.todoListId]: state[action.todoListId].map(task => {\r\n            //         if (task.id !== action.taskId) {\r\n            //             return task\r\n            //         } else {\r\n            //             return {...task, isDone: action.isDone}\r\n            //         }\r\n            //     })\r\n            // }\r\n            let todoListTasks = state[action.todoListId];\r\n            state[action.todoListId] = todoListTasks\r\n                .map(t => t.id === action.taskId\r\n                ? {...t, isDone: action.isDone}\r\n                : t);\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            // return {\r\n            //     ...state,\r\n            //     [action.todoListId]: state[action.todoListId].map(task => {\r\n            //         if (task.id !== action.taskId) {\r\n            //             return task\r\n            //         } else {\r\n            //             return {...task, title: action.title}\r\n            //         }\r\n            //     })\r\n            // }\r\n            let todoListTasks = state[action.todoListId];\r\n            state[action.todoListId] = todoListTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todoListId: todoListId}\r\n}\r\nexport const addTaskAC = (title: string, todoListId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todoListId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todoListId}\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    RemoveTodoListAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TasksStateType, TodolistType} from \"./App\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    console.log(\"AppWithRedux is called\")\r\n\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(AddTodoListAC(title));\r\n    }, [dispatch]);\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(RemoveTodoListAC(todoListId));\r\n    }, [dispatch]);\r\n    const changeTodoListTitle = useCallback((newTitle: string, todoListId: string) => {\r\n        dispatch(ChangeTodoListTitleAC(newTitle, todoListId));\r\n    }, [dispatch]);\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(ChangeTodoListFilterAC(value, todolistId));\r\n    }, []);\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\r\n        dispatch(removeTaskAC(taskId, todoListId));\r\n    }, [dispatch]);\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskAC(title, todoListId));\r\n    }, [dispatch]);\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId));\r\n    }, [dispatch]);\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, todoListId));\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"menu\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let allTodoListTasks = tasks[tl.id];\r\n\r\n                            return (\r\n                                <Grid key={tl.id} item>\r\n                                    <Paper style={{padding: \"20px\"}} elevation={2}>\r\n                                        <Todolist\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={allTodoListTasks}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            );\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from './state/store';\r\n\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}