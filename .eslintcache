[{"D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\AddItemForm.stories.tsx":"1","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\EditableSpan.stories.tsx":"2","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\Task.stories.tsx":"3","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\AppWithRedux.stories.tsx":"4","D:\\MyDevelopment\\SocNet\\todolist\\src\\AddItemForm.tsx":"5","D:\\MyDevelopment\\SocNet\\todolist\\src\\EditableSpan.tsx":"6","D:\\MyDevelopment\\SocNet\\todolist\\src\\Task.tsx":"7","D:\\MyDevelopment\\SocNet\\todolist\\src\\AppWithRedux.tsx":"8","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\decorators\\ReduxStoreProviderDecorator.tsx":"9","D:\\MyDevelopment\\SocNet\\todolist\\src\\state\\tasks-reducer.ts":"10","D:\\MyDevelopment\\SocNet\\todolist\\src\\state\\todolists-reducer.ts":"11","D:\\MyDevelopment\\SocNet\\todolist\\src\\Todolist.tsx":"12","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\todolists-api.stories.tsx":"13","D:\\MyDevelopment\\SocNet\\todolist\\src\\api\\todolist-api.ts":"14","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\tasks-api.stories.tsx":"15","D:\\MyDevelopment\\SocNet\\todolist\\src\\api\\task-api.ts":"16"},{"size":356,"mtime":1618244320971,"results":"17","hashOfConfig":"18"},{"size":372,"mtime":1618244320971,"results":"19","hashOfConfig":"18"},{"size":1092,"mtime":1618244320971,"results":"20","hashOfConfig":"18"},{"size":394,"mtime":1618244320971,"results":"21","hashOfConfig":"18"},{"size":1547,"mtime":1618244320961,"results":"22","hashOfConfig":"18"},{"size":1144,"mtime":1618244320962,"results":"23","hashOfConfig":"18"},{"size":1494,"mtime":1618244320963,"results":"24","hashOfConfig":"18"},{"size":4524,"mtime":1618244320962,"results":"25","hashOfConfig":"18"},{"size":1183,"mtime":1618244320972,"results":"26","hashOfConfig":"18"},{"size":4062,"mtime":1618244320969,"results":"27","hashOfConfig":"18"},{"size":2374,"mtime":1618244320969,"results":"28","hashOfConfig":"18"},{"size":4215,"mtime":1618244320963,"results":"29","hashOfConfig":"18"},{"size":1548,"mtime":1618656192158,"results":"30","hashOfConfig":"18"},{"size":1023,"mtime":1618494288794,"results":"31","hashOfConfig":"18"},{"size":1733,"mtime":1618666762147,"results":"32","hashOfConfig":"18"},{"size":1112,"mtime":1618666679302,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"1la5jzc",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"59","usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\AddItemForm.stories.tsx",["75"],"import React from \"react\";\r\nimport {action} from \"@storybook/addon-actions\";\r\nimport {AddItemForm} from \"../AddItemForm\";\r\n\r\n\r\n\r\n\r\nexport default {\r\n    title: 'AddItemForm Stories',\r\n    component: AddItemForm\r\n}\r\n\r\n\r\nexport const AddItemFormBaseExample  = (props: any) => {\r\n    return (<AddItemForm addItem={action('Button inside form clicked')}/>)\r\n}\r\n",["76","77"],"D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\EditableSpan.stories.tsx",["78"],"import React from \"react\";\r\nimport {action} from \"@storybook/addon-actions\";\r\nimport EditableSpan from \"../EditableSpan\";\r\n\r\n\r\nexport default {\r\n    title: 'EditableSpan Stories',\r\n    component: EditableSpan\r\n}\r\n\r\n\r\nexport const EditableSpanFormBaseExample  = (props: any) => {\r\n    return (<EditableSpan value={\"StartValue\"} changeValue={action(\"value changed\")}/>)\r\n}\r\n","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\Task.stories.tsx",["79"],"import React from \"react\";\r\nimport {action} from \"@storybook/addon-actions\";\r\nimport {Task} from \"../Task\";\r\n\r\n\r\n\r\nexport default {\r\n    title: 'Task Stories',\r\n    component: Task,\r\n}\r\n\r\nconst removeCallback = action('Remove button inside Task clicked');\r\nconst changeStatusCallback = action('Status changed inside Task');\r\nconst changeTitleCallback = action('Title changed inside Task');\r\n\r\n\r\nexport const TaskBaseExample = (props: any) => {\r\n    return (\r\n        <div>\r\n            <Task\r\n                task={{id: '1', isDone: true, title: \"CSS\"}}\r\n                removeTask={removeCallback}\r\n                changeTaskStatus={changeStatusCallback}\r\n                changeTaskTitle={changeTitleCallback}\r\n                todoListId={\"todoList1\"}\r\n            />\r\n            <Task\r\n                task={{id: '2', isDone: false, title: \"JS\"}}\r\n                removeTask={removeCallback}\r\n                changeTaskStatus={changeStatusCallback}\r\n                changeTaskTitle={changeTitleCallback}\r\n                todoListId={\"todoList1\"}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\AppWithRedux.stories.tsx",["80"],"import React from \"react\";\r\nimport AppWithRedux from \"../AppWithRedux\";\r\nimport {ReduxStoreProviderDecorator} from \"./decorators/ReduxStoreProviderDecorator\";\r\n\r\n\r\n\r\nexport default {\r\n    title: 'AppWithRedux Stories',\r\n    component: AppWithRedux,\r\n    decorators: [ReduxStoreProviderDecorator]\r\n}\r\n\r\nexport const AppWithReduxBaseExample = (props: any) => {\r\n    return (< AppWithRedux/>)\r\n}\r\n","D:\\MyDevelopment\\SocNet\\todolist\\src\\AddItemForm.tsx",[],"D:\\MyDevelopment\\SocNet\\todolist\\src\\EditableSpan.tsx",[],"D:\\MyDevelopment\\SocNet\\todolist\\src\\Task.tsx",["81"],"import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./App\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    task: TaskType\r\n    todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const removeTask = () => props.removeTask(props.task.id, props.todoListId);\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todoListId);\r\n    }\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId);\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId]);\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            color={\"primary\"}\r\n            checked={props.task.isDone}\r\n            onChange={onChangeStatus}\r\n        />\r\n        <EditableSpan value={props.task.title} changeValue={changeTaskTitle}/>\r\n        <IconButton onClick={removeTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","D:\\MyDevelopment\\SocNet\\todolist\\src\\AppWithRedux.tsx",["82"],"import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    RemoveTodoListAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TasksStateType, TodolistType} from \"./App\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    console.log(\"AppWithRedux is called\")\r\n\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(AddTodoListAC(title));\r\n    }, [dispatch]);\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(RemoveTodoListAC(todoListId));\r\n    }, [dispatch]);\r\n    const changeTodoListTitle = useCallback((newTitle: string, todoListId: string) => {\r\n        dispatch(ChangeTodoListTitleAC(newTitle, todoListId));\r\n    }, [dispatch]);\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(ChangeTodoListFilterAC(value, todolistId));\r\n    }, []);\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\r\n        dispatch(removeTaskAC(taskId, todoListId));\r\n    }, [dispatch]);\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskAC(title, todoListId));\r\n    }, [dispatch]);\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId));\r\n    }, [dispatch]);\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, todoListId));\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"menu\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let allTodoListTasks = tasks[tl.id];\r\n\r\n                            return (\r\n                                <Grid key={tl.id} item>\r\n                                    <Paper style={{padding: \"20px\"}} elevation={2}>\r\n                                        <Todolist\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={allTodoListTasks}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            );\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\decorators\\ReduxStoreProviderDecorator.tsx",["83","84"],"import React from 'react'\r\nimport {Provider} from 'react-redux'\r\nimport {combineReducers, createStore} from 'redux'\r\nimport {v1} from 'uuid'\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {tasksReducer} from \"../../state/tasks-reducer\";\r\nimport {todoListsReducer} from \"../../state/todolists-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\nconst initialGlobalState = {\r\n    todoLists: [\r\n        {id: \"todoListId1\", title: \"What to learn\", filter: \"all\"},\r\n        {id: \"todoListId2\", title: \"What to buy\", filter: \"all\"}\r\n    ] ,\r\n    tasks: {\r\n        [\"todoListId1\"]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [\"todoListId2\"]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    }\r\n};\r\n\r\nexport const storyBookStore = createStore(rootReducer, initialGlobalState as AppRootStateType);\r\n\r\nexport const ReduxStoreProviderDecorator = (storyFn: any) => (\r\n    <Provider\r\n        store={storyBookStore}>{storyFn()}\r\n    </Provider>)\r\n","D:\\MyDevelopment\\SocNet\\todolist\\src\\state\\tasks-reducer.ts",[],"D:\\MyDevelopment\\SocNet\\todolist\\src\\state\\todolists-reducer.ts",[],"D:\\MyDevelopment\\SocNet\\todolist\\src\\Todolist.tsx",["85","86","87","88","89"],"import React, {useCallback} from \"react\";\r\nimport {FilterValuesType, TaskType, TodolistType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    filter: FilterValuesType\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log(\"TodoList is called\");\r\n    const todoList = useSelector<AppRootStateType, TodolistType>(state => state.todoLists.filter(todo => todo.id === props.id)[0]);\r\n    //const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id]);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id]);\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(props.id, title);\r\n    }, [props.changeTodoListTitle, props.id]);\r\n    const removeTodolist = () => {\r\n        props.removeTodoList(props.id);\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        console.log(\"all\")\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        console.log(\"active\")\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        console.log(\"completed\")\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id]);\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={todoList.title} changeValue={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        task={t}\r\n                        todoListId={props.id}\r\n                        key={t.id}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});","D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\todolists-api.stories.tsx",["90"],"D:\\MyDevelopment\\SocNet\\todolist\\src\\api\\todolist-api.ts",[],"D:\\MyDevelopment\\SocNet\\todolist\\src\\stories\\tasks-api.stories.tsx",["91"],"D:\\MyDevelopment\\SocNet\\todolist\\src\\api\\task-api.ts",[],{"ruleId":"92","severity":1,"message":"93","line":8,"column":1,"nodeType":"94","endLine":11,"endColumn":2},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"92","severity":1,"message":"93","line":6,"column":1,"nodeType":"94","endLine":9,"endColumn":2},{"ruleId":"92","severity":1,"message":"93","line":7,"column":1,"nodeType":"94","endLine":10,"endColumn":2},{"ruleId":"92","severity":1,"message":"93","line":7,"column":1,"nodeType":"94","endLine":11,"endColumn":2},{"ruleId":"99","severity":1,"message":"100","line":24,"column":8,"nodeType":"101","endLine":24,"endColumn":64,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"103","line":43,"column":8,"nodeType":"101","endLine":43,"endColumn":10,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":20,"column":9,"nodeType":"107","messageId":"108","endLine":23,"endColumn":10,"fix":"109"},{"ruleId":"105","severity":1,"message":"110","line":24,"column":9,"nodeType":"107","messageId":"108","endLine":27,"endColumn":10,"fix":"111"},{"ruleId":"99","severity":1,"message":"100","line":33,"column":8,"nodeType":"101","endLine":33,"endColumn":33,"suggestions":"112"},{"ruleId":"99","severity":1,"message":"100","line":36,"column":8,"nodeType":"101","endLine":36,"endColumn":45,"suggestions":"113"},{"ruleId":"99","severity":1,"message":"100","line":44,"column":8,"nodeType":"101","endLine":44,"endColumn":38,"suggestions":"114"},{"ruleId":"99","severity":1,"message":"100","line":48,"column":8,"nodeType":"101","endLine":48,"endColumn":38,"suggestions":"115"},{"ruleId":"99","severity":1,"message":"100","line":52,"column":8,"nodeType":"101","endLine":52,"endColumn":38,"suggestions":"116"},{"ruleId":"92","severity":1,"message":"93","line":5,"column":1,"nodeType":"94","endLine":7,"endColumn":2},{"ruleId":"92","severity":1,"message":"93","line":5,"column":1,"nodeType":"94","endLine":7,"endColumn":2},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["117"],"no-negated-in-lhs",["118"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["119"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["120"],"no-useless-computed-key","Unnecessarily computed property [\"todoListId1\"] found.","Property","unnecessarilyComputedProperty",{"range":"121","text":"122"},"Unnecessarily computed property [\"todoListId2\"] found.",{"range":"123","text":"124"},["125"],["126"],["127"],["128"],["129"],"no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},[637,652],"\"todoListId1\"",[786,801],"\"todoListId2\"",{"desc":"130","fix":"134"},{"desc":"130","fix":"135"},{"desc":"130","fix":"136"},{"desc":"130","fix":"137"},{"desc":"130","fix":"138"},"Update the dependencies array to be: [props]",{"range":"139","text":"140"},"Update the dependencies array to be: [dispatch]",{"range":"141","text":"142"},{"range":"143","text":"140"},{"range":"144","text":"140"},{"range":"145","text":"140"},{"range":"146","text":"140"},{"range":"147","text":"140"},[1022,1078],"[props]",[1665,1667],"[dispatch]",[1453,1478],[1608,1645],[1866,1896],[2040,2070],[2223,2253]]